# src/config/tasks.yaml
tasks:
  project_planning_task:
    description: >
      Analyze the user's request: '{project_details}'. Your task is to create an
      extremely concise, high-level project plan. You MUST follow the format provided
      in the expected output EXACTLY, including the use of markdown for bolding and
      the HTML <br><br> tags for spacing. Do not add any other sections or introductory
      text.
    expected_output: >
      A super-concise, structured plan in the following markdown format:
      
      **Description:**
      - A bullet point describing the project's purpose.
      - A bullet point briefly explaining the core concept of the project.
            
      <br><br>
      
      **Process:**
      - A bullet point explaining build strategy.
      - A bullet point explaining the hardware & software selection process.
      
      <br><br>
      
      **Budget:**
      - A bullet point stating the budget.

  project_naming_task:
    description: "Create a short, catchy name (3-5 words max) for the project: {project_details}"
    expected_output: "A single string containing the short project name."

    

  component_reasoning_task:
    description: >
      Read the project plan. Based on your internal knowledge as an expert engineer,
      create a conceptual list of components.
      
      CRITICAL INSTRUCTION 1: You MUST ONLY list electronic and electro-mechanical components
      (e.g., microcontrollers, sensors, motors, relays).
      Do NOT list passive, non-electronic items like tubing, hoses, containers, frames, or fasteners.

      CRITICAL INSTRUCTION 2: Your list MUST contain a maximum of 8 essential components.
      
      Project Plan: {project_plan}
    expected_output: "A markdown table with columns: 'Sl no.', 'Component Name', 'Quantity', 'Purpose'."

  component_sourcing_task:
    description: >
      You are a hyper-efficient data-gathering agent. You have been given a markdown table of conceptual components.
      For each component, you MUST follow this exact, resilient process:
      1.  **SEARCH:** Use your search tool with a precise query like '"[Component Name]" price from a reputable Indian electronics store'
          to try and find the price in the search result snippet.
      2.  **VALIDATE:** Look at the `Observation`. If a price is clearly visible, record it and the URL.
      3.  **FALLBACK:** If the price is NOT in the snippet after a maximum of two (2) search attempts for a single component,
          you MUST stop searching for that component, mark its price as 'N/A', and immediately move on to the next one.
      
      After processing ALL components, compile your final report in two parts, separated by '---DATA_SEPARATOR---'.
      Part 1 is the user-facing summary. Part 2 is the detailed markdown table.

      Here is the conceptual component table you must use:
      ---
      {final_bom}
      ---
    expected_output: "A user summary, '---DATA_SEPARATOR---', and a detailed markdown table."

  diagram_generation_task:
    description: >
      You are a strict Mermaid diagram generator. Your task is to analyze the following project summary, which includes an initial plan and a final Bill of Materials.
      Based on this information, produce TWO valid Mermaid source strings: one for the project's workflow and one for its system architecture.

      Hard rules:
      - Return ONLY a JSON object in a ```json fence with keys: workflow_mermaid, architecture_mermaid, title_workflow, title_architecture.
      - Each Mermaid string must start with its directive (e.g., 'flowchart TD') and contain NO code fences.
      - Use ONLY square-box nodes (e.g., 'Node[Text]'). Do not use round brackets like '()' or '(())'.
      - Node IDs must be simple (letters, numbers, underscores).

      Here is the project summary:
      ---
      Initial Plan: {project_plan}
      Final Bill of Materials: {final_bom}
      ---
    expected_output: "A single, clean JSON object in a ```json code fence, containing the two Mermaid diagram source strings and their titles."

  
  code_generation_task:
    description: "Write a complete Arduino sketch based on the final BOM markdown table. Final BOM: {final_bom}"
    expected_output: "A code block containing the Arduino code."